---
title: "Case_study-SARS-CoV-2"
author: "Jordi"
format: 
  html: 
    self-contained: true
    mainfont: 'Montserrat'
editor: visual
params:
  design: ""
  id: ""
  metadata: ""
  context_tree: ""
  diversity_alignment: ""
  nsp: ""
  vcf: ""
  depth_files: ""
  summary_demixing: ""
  window: ""
  distancias: ""
  N_S: ""
---
<head>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat&display=swap" rel="stylesheet">
</head>

# {style="text-align: justify"}

```{r message=FALSE, warning=FALSE, include=FALSE}
source(params$design)

# LIBRERIAS #######

library(pacman)
p_load("tidyverse",
       "stringi",
       "flextable",
       "ggpubr",
       "ggtree",
       "ape",
       "adephylo",
       "plotly",
       "ggrepel",
       "apex",
       "adegenet",
       "pegas",
       "mmod",
       "poppr",
       "treeio",
       "data.table",
       "future.apply",
       "scales",
       "quarto",
       "showtext")
```

```{r message=FALSE, warning=FALSE, include=FALSE}
# ID de las muestras
data_ID <- strsplit(params$id," ")[[1]]

# VCF 
vcf <- read_delim(params$vcf)

# Obtener muestras sin covertura
positions <- pull(vcf,POS) %>% unique()
depth <- data.frame(pos = sort(positions))
paths <- strsplit(params$depth_files," ")[[1]]
for (path in paths) {
  
  data <- read_delim(path, col_names = c("SAMPLE","position","Base","Depth"))
  sample <- str_match(path,"COV......") %>% as.character()
  data <- filter(data, position %in% positions)
  depth[sprintf("%s",sample)] <- data$Depth
}

depth <- pivot_longer(depth, contains("COV"), names_to = "COV", values_to = "depth") %>%
  filter(depth < 30)

bad_combinations <- paste(depth$COV,depth$pos, sep = "-")


##### Preparar el vcf para los plots 

vcf <- vcf %>% 
  mutate(SNP = paste(REF,POS,ALT, sep = "-")) %>%
  select(SNP,REGION,ALT_FREQ, GFF_FEATURE, synonimous)

vcf <- vcf %>%
  pivot_wider(names_from = REGION, values_from = ALT_FREQ, values_fill = 0) %>%
  pivot_longer(contains("COV"), names_to = "REGION", values_to = "ALT_FREQ") %>% # Obtener 0 para las muestras sin variación
  rowwise() %>%
  mutate(POS = strsplit(SNP,"-")[[1]][2]) %>%
  ungroup() %>%
  filter(!(paste(REGION,POS,sep="-") %in% bad_combinations)) # Eliminar las que no tienen dato por no tener cobertura

data <- read_csv(params$metadata) %>%
  filter(ID %in% vcf$REGION) %>%
  select(ID, CollectionDate)

vcf <- left_join(vcf,data, by = c("REGION" = "ID"))

vcf <- arrange(vcf,CollectionDate)

# Orden temporal de las muestras
date_order <- select(vcf, REGION, CollectionDate) %>%
  unique() %>%
  pull(REGION)


vcf <- vcf %>%
  mutate(interval = as.numeric(CollectionDate - min(CollectionDate))) %>%
  group_by(SNP) %>%
  mutate(n = sum(ALT_FREQ > 0)) %>%
  ungroup() %>%
  group_by(SNP) %>%
  mutate(p = cor(ALT_FREQ,interval)) %>%
  arrange(factor(REGION,date_order), .by_group = T) %>%
  ungroup()


vcf <- vcf %>%
  mutate(case = case_when(p > 0.48 ~ "<--",
                          p < -0.3 ~ "-->",
                          T ~ "Rnd"),
         number = case_when(n %in% c(1:2) ~ "[1-2]",
                            n %in% c(3:5) ~ "[3-5]",
                            n %in% c(6:7) ~ "[6-7]",
                            n %in% c(8:9) ~ "[8-9]",
                            n > 9 ~ "> 9"),
         GFF_FEATURE = gsub(":.*","",GFF_FEATURE))


# Arbol con contexto de gisaid para las muestras

tree <- ape::read.tree(params$context_tree)
tree <- root(tree, "NC_045512.2", resolve.root = TRUE)

tree2 <- groupClade(tree, c(81))

full_report <- read.csv(params$metadata) %>%
  filter(ID %in% data_ID) 

b <- data.frame(label = tree2$tip.label)


# Demixing

demix <- read_csv(params$summary_demixing) %>%
  pivot_wider(names_from = "sample", values_from = "abundances", values_fill = 0) %>%
  pivot_longer(contains("COV"), names_to = "sample", values_to = "abundances") 

maximum_lineage <- demix %>%
  group_by(sample) %>%
  top_n(1,abundances) %>%
  ungroup()

demix <- left_join(demix,select(full_report, ID,CollectionDate), by = c("sample" = "ID")) 

# window plot 

window <- read.csv(params$window)
window["group"] <- 1

nsp <- read_csv(params$nsp)
 nsp <- mutate(nsp,summary_nsp = case_when(NSP %in% paste("nsp",seq(4,12,1),sep = "") ~ "nsp4-12",
                                           NSP %in% paste("nsp",seq(14,16,1),sep = "") ~ "nsp14-16",
                                                      T ~ NSP),
               summaary_start =case_when(NSP %in% paste("nsp",seq(4,12,1), sep = "") ~ 8555,
                                         NSP %in% paste("nsp",seq(14,16,1),sep = "") ~ 18040,
                                                        T ~ POS_i),
               summaary_end =case_when(NSP %in% paste("nsp",seq(4,12,1), sep = "") ~ 16236,
                                       NSP %in% paste("nsp",seq(14,16,1),sep = "") ~ 21552,
                                                        T ~ POS_f)) %>%
   filter(NSP != "nsp1")
# Comparacion_distancias

matrix_p <- read_csv(params$distancias) %>%
  column_to_rownames(var = "...1") %>%
  as.matrix()

tree_nj <- nj(as.dist(matrix_p))
tree_nj <- root(tree_nj, "NC_045512.2", resolve.root = TRUE)

Distancias_ponderadas <- tree_subset(tree_nj,8, levels_back = 1)

tree_ml <- ape::read.tree(params$context_tree)

tree_ml <- root(tree_ml, "NC_045512.2", resolve.root = TRUE)
ML <-  tree_subset(tree_ml,34)

# Evolución

N_S_position <- read_csv(params$N_S)

# Diversidad

gene_ex <- read.dna(params$diversity_alignment,format = "fasta", as.matrix = F)
gene_ex <- gene_ex[names(gene_ex) != "NC_045512.2 Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome"]

labs = data.frame(date_order = date_order, V2 = seq(1,12,1))

```

# ¿Es una misma infección?

## Demixing

```{r echo=FALSE, warning=FALSE}
demix_plot <- demix %>%
  group_by(lineages) %>%
  filter(n() >= 2, max(abundances) > 0.05) %>%
  ungroup() %>%
  arrange(CollectionDate) %>%
  ggplot() + 
  aes(x = as.Date(CollectionDate), y = as.numeric(abundances), group = lineages, color = lineages) + 
  geom_line(linewidth = 1) +
  scale_color_manual(values = lineage_colors) + 
  geom_point(size = 3) + 
  scale_x_continuous(breaks = sort(unique(as.Date(demix$CollectionDate))),labels = seq(1,12,1),guide=guide_axis(n.dodge=2)) +
  theme(axis.text.x = element_text(color = "#2177d4"),
        legend.position = "bottom") + 
  labs(x = "Sample", y = "Relative abundance", color = "Lineage")

demix_plot

```

Utilizando Freyja vemos que B.1 es solo el linaje mayoritario en 5 de las muestras

Aparecen otros linajes como B.1.239, B.1.399, B.1.400.

Esto podria ser debido a una infección mixta o coinfección aunque no hay un linaje secundario claro ni una tendencia clara.

## Análisis filogenético

```{r echo=FALSE, warning=FALSE}
p <- ggtree(tree2) %<+% (b %>% 
                                              rowwise() %>%
                                              mutate(group = case_when(str_detect(label,"COV") ~ "Patient",
                                                                       str_detect(label,"NC_") ~ "NC_045512.2",
                                                                       T ~ "Other"),
                                                     lineage = case_when(label %in% maximum_lineage$sample ~ as.character(maximum_lineage[maximum_lineage$sample == label, "lineages"]),
                                                                         str_detect(label,"NC_") ~ "NC_045512.2",
                                                                         str_detect(label, "Sw") | str_detect(label, "England/MILK")  ~ "B.1.400",
                                                                         str_detect(label,"England") ~ "B.1.238",
                                                                         str_detect(label,"Turkey") | str_detect(label,"Spain/RI") | str_detect(label,"Iceland") ~ "B.1.399",
                                                                         T ~ "B.1"))) 



p$data <- left_join(p$data,labs, by = c("label" = "date_order"), copy = T)
tree_plot <- p +
geom_tippoint(aes( colour = lineage), alpha = 1, size = 3 ) + 
  geom_tiplab(aes(label = V2), color = "#2177d4", hjust = -0.5) +
  geom_text2(aes(label=c(rep("",55),tree2$node.label), 
                 x=branch) , vjust=0, color = "black") + 
  scale_colour_manual(values = lineage_colors) +
  theme() + 
  labs(color = "Lineage") + 
  geom_treescale() + 
  geom_rootedge(rootedge = 0.00003) + 
  xlim(c(-0.00003,0.0011)) + 
  geom_strip("COV012672","COV012638", color = "red", label = "Study group \n (B.1)", offset.text = 0.00001, offset = 0.00005) + 
  theme(text = element_text(size = 13, family = "Montserrat", lineheight = 0))

tree_plot
```

Se realizó un arbol por ML con muestras de los distintos linajes descritos por freyja. Nuestras muestras forman un cluster monofilético con un valor de bootstrap de 95%.

## Análisis de diversidad

```{r message=FALSE, warning=FALSE, include=FALSE}
names <- names(gene_ex)

# Función para sacar diversidad genética de una muestra aleatoria
nucleotide.diversity <- function(dna_object, record.names, sample.size){
  sample <- sample(record.names, sample.size, replace = F)
  dna_subset <- dna_object[record.names %in% sample]
  return(nuc.div(dna_subset))
}


boot.nd <- function(aln, sample.size = 12, reps = 100) {
  record.names <- names(aln)
  sapply(
    1:reps,
    function(x) nucleotide.diversity(aln, record.names, sample.size)
  )
}

####
plan(multisession, workers = 4)
boot.nd.parallel <- function(aln, sample.size = 12, reps = 100) {
  record.names <- names(aln)
  future_sapply(
    1:reps,
    function(x) nucleotide.diversity(aln, record.names, sample.size),
    future.seed = TRUE
  )
}


```

```{r echo=FALSE, warning=FALSE}
divs <- boot.nd.parallel(gene_ex, 12, 1000)

plot <- data.frame(pi = divs) %>%
  mutate(cat_pi = cut(pi,50)) %>%
  ggplot() + 
  aes(pi) + 
  geom_density(aes(x = pi) ,fill = "#2177d4", alpha = 0.7, bw = 0.000001,color = "white" ) + 
  geom_vline(aes(xintercept = 4.111673e-05), color = "red") + 
  labs(x = "π" , y = "Density")

plot
```

## Señal temporal

```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=15}
distances_P <- adephylo::distRoot(Distancias_ponderadas, "all", method = "patristic") %>% as.data.frame() %>% 
  rownames_to_column(var = "ID") %>%
  rename(distance = ".") %>% 
  mutate(distance = distance) %>%
  filter(ID %in% data_ID) %>%
  left_join(select(full_report, ID,CollectionDate)) %>%
  mutate(date_interval = as.numeric(as.Date(CollectionDate) - min(as.Date(CollectionDate))))

distances_ML <- adephylo::distRoot(ML, "all", method = "patristic") %>% as.data.frame() %>% 
  rownames_to_column(var = "ID") %>%
  rename(distance = ".") %>% 
  mutate(distance = distance) %>%
  filter(ID %in% data_ID) %>%
  left_join(select(full_report, ID,CollectionDate)) %>%
  mutate(date_interval = as.numeric(as.Date(CollectionDate) - min(as.Date(CollectionDate))),
         distance = distance*29638)

distances_ML["type"] = "SNP"
distances_P["type"] = "Ponderadas"
distancias <- rbind(distances_ML, distances_P)

regline <- ggplot(distancias) +
  aes(x = date_interval, y = distance, color = type) + 
  geom_smooth(method = "lm",fill = "gray95", alpha = 0.6) +
  scale_color_manual(values = c("#2177d4","#afd6ff"), labels = c("Weighted distances", "ML")) + 
  stat_cor(geom = "label") +
  geom_point() +
  scale_x_continuous(breaks = c(0,35,55,70,90,132,136,148,227,231,233,237), labels = seq(1,12,1)) +
  labs(y = "Root to tip distance", x = "Time since first sample", color = "Method") + 
  theme(text = element_text( face = "bold"),
        axis.text.x = element_text(color = "#2177d4"))

regline

```

## Método alternativo para el cálculo de distancias

### Descripción matemática

$d(M,N)=\sum_{i=1}^{I} \frac{\sum_{j=1}^{J} (M_{ij} -N_{ij})^2}{4 -\sum_{j=1}^{J} (M_{ij} +N_{ij})^2}$

$M$ y $N$: Dos secuencias cualesquiera.

$i = 1... I :$ Índice sobre las posiciones polimorficas de M y N.

$j = 1... J :$ Índice sobre los alelos (A,C,T,G).

$M_{ij}$ : Frecuencia del alelo $j$ en la posicion $i$ de la secuencia $M$.

### Comparacion de las filogenias

```{r echo=FALSE, warning=FALSE, message=FALSE}
ML <- rotateConstr(ML,c("COV012638","COV012651","COV012661","COV012663","COV012674","COV012672","COV012684","COV012630","COV012623","COV012635","COV012640","COV012716"))
Distancias_ponderadas <- rotateConstr(Distancias_ponderadas,c("COV012638","COV012630","COV012651","COV012661","COV012663","COV012674","COV012672","COV012684","COV012623","COV012635","COV012640","COV012716"))
t1 <- ggtree(ML, ladderize = F) + geom_tiplab()
t1$data$x <- t1$data$x*29638
t2 <- ggtree(Distancias_ponderadas, ladderize = F) + geom_tiplab()


d1 <- t1$data
d2 <- t2$data

d1$tree <-'t1'
d2$tree <-'t2'

d2$x <- max(d2$x) - d2$x + max(d1$x) +  max(d1$x)*0.3
pp <- t1 + geom_tree(data=d2)

dd <- bind_rows(d1, d2) %>% 
  filter(isTip == TRUE)
dd1 <- as.data.frame(dd) 

green_tree <- dd1[which(dd1$label %in% c("COV012674")), c('label', 'x', 'y', 'tree')]
comp <- pp + geom_line(aes(x, y, group=label), data=dd1, color='#2177d4', linetype = 2) + 
  geom_text(aes(x = 1, y = 0, label = "ML")) + 
  geom_text(aes(x = 45, y = 0, label = "N-J"))
comp
```

# Variantes

## ¿Dónde se acumulan?

```{r echo=FALSE, warning=FALSE, message=FALSE}
window_plot <- ggplot(window) + 
  aes(x = position, y = fractions, color = gen) + 
  geom_point() +
  geom_line(aes(group = group), colour = "black", alpha = 0.3) +
  scale_y_continuous(label = percent, limits = c(0,0.012)) + 
  scale_color_manual(values = gene_colors) +
  labs(y = "Proportion of \n sites with SNV", x = "SARS-CoV-2 genome position", color = "Gen") + theme(axis.title.y = element_text(size = 18),legend.position = "bottom")
```

```{r echo=FALSE, warning=FALSE}
window_plot_nsp <- window_plot + 
    geom_vline(data = nsp, aes(xintercept = summaary_start), color = "red") + 
    geom_vline(data = nsp, aes(xintercept = summaary_end), color = "red") + 
    geom_label(data = nsp, aes(x = (summaary_start + summaary_end)/2, y = 0.01, label = summary_nsp), inherit.aes = F, size = 5)

window_plot_nsp
```

## SNV de interés

```{r message=FALSE, warning=FALSE, include=FALSE}
 plotlist = list()
 names = c()
 for (gff in unique(vcf$GFF_FEATURE)) {
   df = filter(vcf, GFF_FEATURE == gff, number != "[1-2]")
   
   plot = df %>%
     filter(synonimous == "No") %>%
     ggplot() + 
     aes(x = interval, y = ALT_FREQ, color = SNP) +  
     geom_point() + 
     scale_color_manual(values = snp_colors, guide = "none" ) +
     geom_line(aes(group = SNP)) + 
     facet_grid(case ~  number) + 
     scale_x_continuous(breaks = c(0,50,100,150,200), limits = c(0,250)) +
     scale_y_continuous(breaks = c(0,1), limits = c(0,1)) +
     theme(axis.text.x = element_text(angle = 60, hjust = 1),
           axis.title.y = element_text(vjust = 4)) + 
     labs(x = "", y = "Frequency")
   if (!is.na(gff) & !str_detect(gff,"orf1ab") & !str_detect(gff,"M") ){
     plotlist[[sprintf("%s",gff)]] <- plot
     names <- c(names,gff)
   }
   if (str_detect(gff,"orf1ab") & !is.na(gff)){
     assign(gff,(plot + labs(x = "Days since first sample")))
   }
   
 }
 
 plot = vcf %>%
   filter(synonimous == "No", number != "[1-2]") %>%
   mutate(new_SNP = case_when(SNP %in% names(snp_colors) ~ SNP,
                              T ~ "Other")) %>%
   ggplot() + 
   aes(x = interval, y = ALT_FREQ, color = new_SNP) +  
   geom_point() + 
   scale_color_manual(breaks  = names(snp_colors),values = snp_colors ) +
   geom_line(aes(group = SNP)) + 
   facet_grid(case ~  number) + 
   scale_x_continuous(breaks = c(0,50,100,150,200), limits = c(0,250)) +
   theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
   labs(x = "COV") + theme(legend.position = "bottom",
                           axis.title.y = element_text(vjust = 3)) + labs(color = "SNP")
 
 a <- ggarrange(plotlist = plotlist, align = "hv", ncol = 2, nrow = 2, labels = names)
 
 f <- ggarrange(a,orf1ab, 
                ncol = 1, 
                labels = c("","ORF1ab"),
                align = "hv",
                heights = c(1.5,1), 
                legend.grob = get_legend(plot),
                legend = "bottom")
```

```{r echo=FALSE, warning=FALSE, fig.width= 30, fig.height= 30}
f
```

## Variantes en el tiempo

```{r echo=FALSE, warning=FALSE, message=FALSE}
vcf %>%
  filter(ALT_FREQ <= 0.95, ALT_FREQ > 0.05) %>%
  group_by(REGION) %>%
  transmute(date = interval,
            n = n()) %>%
  unique() %>%
  ggplot() + 
  aes(date, n) + 
  geom_point(color = "red", size = 1) + 
  geom_smooth(method = "lm", alpha = 0.1) + 
  stat_cor() +
  scale_x_continuous(breaks = sort(unique(vcf$interval)),labels = seq(1,12,1),guide=guide_axis(n.dodge=2)) + 
  theme(axis.text.x = element_text(color = "#2177d4")) + 
  labs(x = "Fecha", y = "Nº de sitios heterocigotos")

```

## Estudios de evolución

Se ha calculado Mutaciones sinónimas por sitio sinonimo (dS) y mutaciones no sinonimas por sitio no sinónimo (dS) para cada muestra.

```{r echo=FALSE, warning=FALSE, message=FALSE}
vcf %>%
  filter(ALT_FREQ > 0.05) %>%
  group_by(REGION,synonimous) %>%
  summarise(Freq = sum(ALT_FREQ)) %>%
  pivot_wider( names_from = synonimous, values_from = Freq, values_fill = 0 ) %>%
  transmute(dn = No/sum(N_S_position$S),
         ds = yes/sum(N_S_position$S)) %>%
  pivot_longer(c("dn","ds"), values_to = "value", names_to = "d") %>%
  ungroup() %>%
  left_join(unique(select(vcf,REGION,interval))) %>%
  ggplot() + 
  aes(x = interval, y = value, color = d) + 
  geom_point() +
  geom_line() + 
  scale_color_hue(labels = c("dN","dS")) + 
  labs(y = "", x = "Intervalo de tiempo", color = "Estadístico")
```

En una gráfica general podemos ver que en todo momento dN \> dS.

```{r echo=FALSE, warning=FALSE, fig.width=12, message = FALSE}
vcf %>%
  filter(ALT_FREQ > 0.05) %>%
  group_by(REGION,GFF_FEATURE,synonimous) %>%
  summarise(Freq = sum(ALT_FREQ, na.rm = T)) %>%
  pivot_wider( names_from = synonimous, values_from = Freq, values_fill = 0 )  %>%
  left_join(N_S_position,by = c("GFF_FEATURE" = "gene")) %>%
  transmute(dn = No/N,
         ds = yes/S,
         ID = REGION,
         gene = GFF_FEATURE) %>%
  pivot_longer(c("dn","ds"), values_to = "value", names_to = "d") %>%
  left_join(unique(select(vcf,REGION,interval)), by = c("ID" = "REGION")) %>%
  filter(!is.na(gene)) %>%
  ggplot() + 
  aes(x = interval, y = value, color = d) + 
  geom_point() +
  geom_line() + 
  facet_wrap(vars(gene)) + 
  scale_color_hue(labels = c("dN","dS")) + 
  labs(y = "", x = "Intervalo de tiempo", color = "Estadístico")

```

Separando por región vemos dN \> dS en orf1ab y N. En ORF3a es debido a una única mutación.

```{r echo=FALSE, warning=FALSE, fig.width=12, message = FALSE}

vcf %>%
  filter(ALT_FREQ > 0.05) %>%
  group_by(REGION,GFF_FEATURE,synonimous) %>%
  summarise(Freq = sum(ALT_FREQ, na.rm = T)) %>%
  pivot_wider( names_from = synonimous, values_from = Freq, values_fill = 0 )  %>%
  left_join(N_S_position,by = c("GFF_FEATURE" = "gene")) %>%
  transmute(dn = No/N,
         ds = yes/S,
         ID = REGION,
         gene = GFF_FEATURE) %>%
  pivot_longer(c("dn","ds"), values_to = "value", names_to = "d") %>%
  left_join(unique(select(vcf,REGION,interval)), by = c("ID" = "REGION")) %>%
  filter(!is.na(gene)) %>%
  ggplot() + 
  aes(x = d, y = value, color = d) + 
   geom_boxplot(width = 0.2) +
  geom_point() + 
  geom_line(aes(group = REGION), color = "gray50") +
  stat_compare_means(method = "wilcox.test", paired = T) + 
  facet_wrap(vars(gene)) + 
  scale_color_hue(labels = c("dN","dS")) + 
  labs(y = "", x = "Intervalo de tiempo", color = "Estadístico")

```

# Otros análisis

## CtCqN

```{r echo = FALSE, warning = FALSE, message=FALSE, include=FALSE}
a <- read_csv(params$metadata) %>%
  filter(ID %in% date_order)
a %>%
  left_join(unique(select(vcf, REGION,interval)), by = c("ID" = "REGION")) %>%
  ggplot() + 
  aes(x = interval, y = CtCqN) + 
  geom_point() + 
  geom_line() + 
  scale_x_continuous(breaks = sort(unique(vcf$interval)),labels = seq(1,12,1)) + 
  theme(axis.text.x = element_text(color = "#2177d4")) + 
  labs(x = "Date", y = "CtCqN value")
```

```{r echo=FALSE, warning=FALSE}
a %>%
  left_join(unique(select(vcf, REGION,interval)), by = c("ID" = "REGION")) %>%
  ggplot() + 
  aes(x = interval, y = CtCqN) + 
  geom_point() + 
  geom_line() + 
  scale_x_continuous(breaks = sort(unique(vcf$interval)),labels = seq(1,12,1)) + 
  theme(axis.text.x = element_text(color = "#2177d4")) + 
  labs(x = "Date", y = "CtCqN value")
```

Parece que en las muestras de la zona media hay una carga viral menor. La muestra 7 es la más discordante en las tendencias de SNV y la que tiene un Ct más alto. Sus frecuencias alélicas podrian estar más influenciadas por el muestreo.

```{r echo = FALSE, warning = FALSE, message=FALSE, include=FALSE}
a <- read_csv(params$metadata) %>%
  filter(ID %in% date_order) %>% 
  left_join(vcf %>%
  filter(ALT_FREQ <= 0.95, ALT_FREQ > 0.05) %>%
  group_by(REGION) %>%
  transmute(date = interval,
            n = n(),
            ID = REGION) %>%
  unique()) 

```

## CtCqN vs Nº de sitios heteocigotos

```{r echo = FALSE, warning = FALSE, message=FALSE}
a %>% ggplot() +
  aes(x = CtCqN, y = n, label = ID) + 
  geom_point() + 
  geom_smooth(alpha = 0.1) + 
  stat_cor() + 
  labs(x = "CtCqN", y = "Nº sitios con heterocigosidad")

```

No parece que la diversidad esté siendo influenciada por el Ct

## Nº de reads

```{r echo = FALSE, warning = FALSE, message=FALSE}
num_reads = data.frame(ID = a$ID, num = c(375166,396399,376301,370742,480290,490394,329273,372976,331437,446022,338982,309402)) # TODO: obtener los valores de los archivos

a %>%
  left_join(num_reads) %>%
  ggplot() + 
  aes(num, n) + 
  geom_point() + 
  geom_smooth(method = "lm",alpha = 0.1) + 
  stat_cor() +
  labs(x = "Nº mapped reads", y = "Nº sitios heterocigotos")

```

Tampoco parece que el número de sitios heterocigotos este influenciado por el número de reeds mapeadas.

## Desviación de los valores de frecuencia

```{r echo = FALSE, warning = FALSE, message=FALSE}
vcf %>%
  filter(n > 1, ALT_FREQ > 0.05) %>%
  group_by(SNP) %>%
  arrange(interval,.by_group = T ) %>%
  mutate(expected_value = abs(ALT_FREQ - (lag(ALT_FREQ) + lead(ALT_FREQ))/2),
         expected_2 = abs(ALT_FREQ - (lag(ALT_FREQ) + ((lead(ALT_FREQ) - lag(ALT_FREQ))*((interval - lag(interval))/(lead(interval) - lag(interval))))))) %>%
  ungroup() %>%
  filter(!is.na(expected_2)) %>%
  ggplot() + 
  aes(x = factor(REGION,date_order), y = expected_2, fill = REGION) +
  geom_point() + geom_boxplot() + theme(legend.position = "none", axis.text = element_text(angle = 60, hjust = 1))


```

En este plot lo que se muestra es la variación en una medida de lo diferente que es una frecuencia respecto a su entorno. Podemos ver como la muestra **COV012674** es la más discrepante. Las muestras **COV012672** y **COV012684** estan afectados por **COV012674** deebido a como se hace el cálculo.

```{r echo = FALSE, warning = FALSE, message=FALSE}
vcf %>%
  filter(ALT_FREQ > 0.05) %>%
  group_by(SNP) %>%
  arrange(interval,.by_group = T ) %>%
  mutate(expected_value = abs(ALT_FREQ - (lag(ALT_FREQ) + lead(ALT_FREQ))/2),
         expected_2 = abs(ALT_FREQ - (lag(ALT_FREQ) + ((lead(ALT_FREQ) - lag(ALT_FREQ))*((interval - lag(interval))/(lead(interval) - lag(interval))))))) %>%
  ungroup() %>%
  filter(!is.na(expected_2)) %>%
  group_by(REGION) %>%
  summarise(expected = mean(expected_2)) %>%
  left_join(select(a,ID,CtCqN), by = c("REGION" = "ID")) %>%
  ggplot() + 
  aes(CtCqN,expected) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  stat_cor() + 
  labs(y = "Distancia al valor esperado")


```

