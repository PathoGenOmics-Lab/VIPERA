import sys
from pathlib import Path
from snakemake.utils import min_version
import subprocess


min_version("7.19")

configfile: "config/config.yaml"
configfile: "config/targets.yaml"

include: "rules/common.smk"

BASE_PATH = Path(".").resolve()

# Workflow version
__version__ = "1.0.0"

# Targets
## Output
OUTPUT_NAME = config["OUTPUT_NAME"]
OUTDIR = Path(config["OUTPUT_DIRECTORY"])
OUTDIR.mkdir(parents=True, exist_ok=True)

## Set context to be fetched automatically if CONTEXT_FASTA=null
if "CONTEXT_FASTA" not in config.keys() or config["CONTEXT_FASTA"] is None:
    CONTEXT_FASTA = OUTDIR/"context"/"sequences.fasta"
    if not Path(config["GISAID_YAML"]).is_file():
        sys.exit(f"Tried to download a context dataset, but no GISAID credentials were found at '{config['GISAID_YAML']}' (see README.md).")
elif Path(config["CONTEXT_FASTA"]).is_file():
    CONTEXT_FASTA = config["CONTEXT_FASTA"]
else:
    sys.exit(f"No context FASTA file was found at '{config['CONTEXT_FASTA']}' (see README.md).")

## Set mapping references to be fetched automatically if MAPPING_REFERENCES_FASTA=null
if "MAPPING_REFERENCES_FASTA" not in config.keys() or config["MAPPING_REFERENCES_FASTA"] is None:
    MAPPING_REFERENCES_FASTA = OUTDIR/"mapping_references.fasta"
elif Path(config["MAPPING_REFERENCES_FASTA"]).is_file():
    MAPPING_REFERENCES_FASTA = config["MAPPING_REFERENCES_FASTA"]
else:
    sys.exit(f"No mapping references FASTA file was found at '{config['MAPPING_REFERENCES_FASTA']}' (see README.md).")

## Logging
LOGDIR = OUTDIR / "logs"

## report
REPORT_DIR_PLOTS = Path(OUTDIR/"report/plots")
REPORT_DIR_PLOTS.mkdir(parents=True, exist_ok=True)

REPORT_DIR_TABLES = Path(OUTDIR/"report/tables")
REPORT_DIR_TABLES.mkdir(parents=True, exist_ok=True)


# Rules
include: "rules/fetch.smk"
include: "rules/fasta.smk"
include: "rules/asr.smk"
include: "rules/demix.smk"
include: "rules/vaf.smk"
include: "rules/pangolin.smk"
include: "rules/distances.smk"
include: "rules/evolution.smk"
include: "rules/report.smk"
include: "rules/context.smk"


rule all:
    input:
        OUTDIR/f"{OUTPUT_NAME}.report.html"
