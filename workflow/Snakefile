from pathlib import Path
from snakemake.utils import min_version

min_version("6.0")

configfile: "config/config.yaml"
configfile: "config/targets.yaml"


def iter_lines(file_path):
    with open(file_path) as f:
        for line in f:
            yield line.strip()


# Targets
## Output
OUTPUT_NAME = config["OUTPUT_NAME"]
OUTDIR = Path(config["OUTPUT_DIRECTORY"])
OUTDIR.mkdir(parents=True, exist_ok=True)
## Data folders
BAM_FOLDER = Path(config["BAM_FOLDER"])
FASTA_FOLDER = Path(config["FASTA_FOLDER"])
## Metadata table
METADATA = Path(config["METADATA"])


# Tree parameters
ETC_TREE_PARAMS = []
## UFBoot
if config["N_UFBOOT"] != 0:
    ETC_TREE_PARAMS.append(f"-B {config['N_UFBOOT']:d}")
ETC_TREE_PARAMS = " ".join(ETC_TREE_PARAMS)


rule all:
    input:
        OUTDIR/"reference.fasta",
        OUTDIR/f"{OUTPUT_NAME}.ancestor.fasta"


rule fetch_reference:
    threads: 1
    conda: "envs/fetch.yaml"
    output:
        fasta = OUTDIR/"reference.fasta"
    shell:
        "esearch -db nucleotide -query {config[REFSEQ_REFERENCE]} | efetch -format fasta > {output.fasta}"


rule concat_fasta:
    threads: 1
    shadow: "shallow"
    input:
        FASTA_FOLDER
    output:
        fasta = OUTDIR/f"{OUTPUT_NAME}.fasta"
    shell:
        "cat {input}/* > {output.fasta}"


rule align_fasta:
    threads: 32
    shadow: "shallow"
    conda: "envs/nextalign.yaml"
    params:
        name = OUTPUT_NAME
    input:
        ref_fasta = OUTDIR/"reference.fasta",
        fasta = OUTDIR/f"{OUTPUT_NAME}.fasta"
    output:
        folder = directory(OUTDIR/"nextalign"),
        fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.fasta"
    shell:
        "nextalign run -j {threads} -O {output.folder} -o {output.fasta} -n {params.name} --include-reference -r {input.ref_fasta} {input.fasta}"


rule mask_alignment:
    threads: 1
    conda: "envs/biopython.yaml"
    params:
        remove_sites = False,
        mask_character = "N",
        mask_class = ["mask"]
    input:
        fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.fasta",
        ref_fasta = OUTDIR/"reference.fasta"
    output:
        fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.masked.fasta"
    script:
        "scripts/mask-aln.py"


rule infer_tree:
    threads: 4
    conda: "envs/iqtree.yaml"
    params:
        seqtype = "DNA",
        name = OUTPUT_NAME,
        etc = ETC_TREE_PARAMS
    input:
        fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.masked.fasta"
    output:
        touch(OUTDIR/"tree"/".iqtree_done"),
        folder = directory(OUTDIR/"tree")
    shell:
        """
        mkdir -p {output.folder}
        iqtree2 \
            {params.etc} \
            -o {config[REFSEQ_REFERENCE]} -T AUTO --threads-max {threads} -s {input.fasta} \
            --seqtype {params.seqtype} -m {config[TREE_MODEL]} --prefix {output.folder}/{params.name}
        """


rule reconstruct_ancestral_sequence:
    threads: 4
    conda: "envs/iqtree.yaml"
    params:
        seqtype = "DNA",
        name = OUTPUT_NAME,
        etc = ETC_TREE_PARAMS
    input:
        fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.masked.fasta"
    output:
        folder = directory(OUTDIR/"tree"),
        state_file = OUTDIR/"tree"/f"{OUTPUT_NAME}.state"
    shell:
        """
        mkdir -p {output.folder}
        iqtree2 \
            {params.etc} -asr \
            -o {config[REFSEQ_REFERENCE]} -T AUTO --threads-max {threads} -s {input.fasta} \
            --seqtype {params.seqtype} -m {config[TREE_MODEL]} --prefix {output.folder}/{params.name}
        """


rule ancestor_fasta:
    threads: 1
    conda: "envs/biopython.yaml"
    params:
        node_id = "Node1",
        indeterminate_char = "N",
        name = OUTPUT_NAME
    input:
        state_file = OUTDIR/"tree"/f"{OUTPUT_NAME}.state"
    output:
        fasta = OUTDIR/f"{OUTPUT_NAME}.ancestor.fasta"
    script:
        "scripts/ancestor_fasta.py"


rule polymorphic_sites:
    threads: 1
    conda: "envs/biopython.yaml"
    params:
        indeterminate_char = "N",
        include_indeterminations = False,
        omit_record_IDs = [config["REFSEQ_REFERENCE"]]  # Omit sites from these records
    input:
        reference_fasta = OUTDIR/f"{OUTPUT_NAME}.ancestor.fasta",
        alignment_fasta = OUTDIR/"nextalign"/f"{OUTPUT_NAME}.aligned.fasta"
    output:
        table = OUTDIR/f"{OUTPUT_NAME}.polymorphic_sites.csv"
    script:
        "scripts/polymorphic_sites.py"


rule plot_polymorphisms:
    threads: 1
    conda: "envs/renv.yaml"
    params:
        width = 30,
        height = 15,
        units = "in"
    input:
        table = OUTDIR/f"{OUTPUT_NAME}.polymorphic_sites.csv",
        metadata = METADATA
    output:
        plot = OUTDIR/f"{OUTPUT_NAME}.polymorphic_sites.pdf"
    script:
        "scripts/plot_polymorphisms.R"
